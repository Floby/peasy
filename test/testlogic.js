// Generated by CoffeeScript 1.6.2
(function() {
  var cons, logic, makeCmd, makeInfo, peasy, uarray, uobject, vari, xexports, _ref;

  _ref = logic = require("../lib/logic"), vari = _ref.vari, cons = _ref.cons, uarray = _ref.uarray, uobject = _ref.uobject;

  makeInfo = (peasy = require("../lib/peasy")).makeInfo;

  xexports = {};

  makeCmd = function() {
    var info;

    info = makeInfo('');
    return {
      unify: logic.unify(info),
      orp: peasy.orp(info)
    };
  };

  exports.Test = {
    "test unify 1 1, 1 2": function(test) {
      var orp, unify, _ref1, _ref2;

      _ref1 = makeCmd(), unify = _ref1.unify, orp = _ref1.orp;
      test.equal(unify(1, 1), true);
      _ref2 = makeCmd(), unify = _ref2.unify, orp = _ref2.orp;
      test.equal(unify(1, 2), false);
      return test.done();
    },
    "test unify logicvar": function(test) {
      var $a, orp, unify, _ref1, _ref2, _ref3;

      _ref1 = makeCmd(), unify = _ref1.unify, orp = _ref1.orp;
      test.equal(unify(vari(), 1), true);
      _ref2 = makeCmd(), unify = _ref2.unify, orp = _ref2.orp;
      test.equal(($a = vari()) && unify($a, 1) && unify($a, 2), false);
      _ref3 = makeCmd(), unify = _ref3.unify, orp = _ref3.orp;
      test.equal(($a = vari()) && orp((function() {
        return unify($a, 1) && unify($a, 2);
      }), function() {
        return unify($a, 2);
      })(), true);
      return test.done();
    },
    "test unify cons": function(test) {
      var $a, orp, unify, _ref1, _ref2, _ref3, _ref4;

      _ref1 = makeCmd(), unify = _ref1.unify, orp = _ref1.orp;
      test.equal(unify(cons(1, null), cons(1, null)), true);
      _ref2 = makeCmd(), unify = _ref2.unify, orp = _ref2.orp;
      test.equal(unify(cons(vari(), null), cons(1, null)), true);
      _ref3 = makeCmd(), unify = _ref3.unify, orp = _ref3.orp;
      test.equal(($a = vari()) && unify(cons($a, null), cons(1, null)) && unify($a, 2), false);
      _ref4 = makeCmd(), unify = _ref4.unify, orp = _ref4.orp;
      test.equal(($a = vari()) && orp((function() {
        return unify(cons($a, null), cons(1, null)) && unify($a, 2);
      }), function() {
        return unify($a, 2);
      })(), true);
      return test.done();
    },
    "test unify uobject": function(test) {
      var $a, orp, unify, _ref1, _ref2, _ref3, _ref4, _ref5;

      _ref1 = makeCmd(), unify = _ref1.unify, orp = _ref1.orp;
      test.equal(unify(uobject({
        a: 1
      }), {
        a: 1
      }), true);
      _ref2 = makeCmd(), unify = _ref2.unify, orp = _ref2.orp;
      test.equal(unify(uobject({
        a: 1
      }), {
        a: 2
      }), false);
      _ref3 = makeCmd(), unify = _ref3.unify, orp = _ref3.orp;
      test.equal(unify(uobject({
        a: vari()
      }), {
        a: 1
      }), true);
      _ref4 = makeCmd(), unify = _ref4.unify, orp = _ref4.orp;
      test.equal(($a = vari()) && unify(uobject({
        a: $a
      }), {
        a: 1
      }) && unify($a, 2), false);
      _ref5 = makeCmd(), unify = _ref5.unify, orp = _ref5.orp;
      test.equal(($a = vari()) && orp((function() {
        return unify(uobject({
          a: $a
        }), {
          a: 1
        }) && unify($a, 2);
      }), function() {
        return unify($a, 2);
      })(), true);
      return test.done();
    },
    "test unify array, uarray": function(test) {
      var $a, orp, unify, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

      _ref1 = makeCmd(), unify = _ref1.unify, orp = _ref1.orp;
      test.equal(unify([], []), false);
      _ref2 = makeCmd(), unify = _ref2.unify, orp = _ref2.orp;
      test.equal(unify(uarray([]), []), true);
      _ref3 = makeCmd(), unify = _ref3.unify, orp = _ref3.orp;
      test.equal(unify(uarray([vari()]), []), false);
      _ref4 = makeCmd(), unify = _ref4.unify, orp = _ref4.orp;
      test.equal(unify(uarray([vari()]), [1]), true);
      _ref5 = makeCmd(), unify = _ref5.unify, orp = _ref5.orp;
      test.equal(($a = vari()) && unify(uarray([$a]), [1]) && unify($a, 2), false);
      _ref6 = makeCmd(), unify = _ref6.unify, orp = _ref6.orp;
      test.equal(($a = vari()) && orp((function() {
        return unify(uarray([$a]), [1]) && unify($a, 2);
      }), function() {
        return unify($a, 2);
      })(), true);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=testlogic.map
*/
