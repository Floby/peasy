// Generated by CoffeeScript 1.6.2
(function() {
  var letters, makeInfo, parse1, parse2, parse3, parse4, parse5, recursive, xexports, _ref;

  _ref = require("../lib/peasy.js"), makeInfo = _ref.makeInfo, letters = _ref.letters, recursive = _ref.recursive;

  parse1 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, rec, rules, x, _ref1;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x;
      rec = recursive(info);
      return rules = {
        A: rec(function(start) {
          var m;

          return (m = rules.A(start)) && x(info.cursor) && m + 'x' || m || a(start);
        })
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse2 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, rec, rules, x, _ref1;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x;
      rec = recursive(info);
      return rules = {
        A: rec(function(start) {
          var m;

          return (m = rules.B(start)) && x(info.cursor) && m + 'x' || m || a(start);
        }),
        B: rec(function(start) {
          return rules.A(start) || b(start);
        })
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse3 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, rec, rules, x, _ref1;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x;
      rec = recursive(info);
      return rules = {
        A: rec(function(start) {
          var m;

          return (m = rules.B(start)) && x(info.cursor) && m + 'x' || m || a(start);
        }),
        B: rec(function(start) {
          return rules.C(start);
        }),
        C: rec(function(start) {
          return rules.A(start) || b(start);
        })
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse4 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, rec, rules, x, y, _ref1;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x, y = _ref1.y;
      rec = recursive(info);
      return rules = {
        A: rec(function(start) {
          var m;

          return (m = rules.B(start)) && x(info.cursor) && m + 'x' || m || a(start);
        }),
        B: rec(function(start) {
          var m;

          return (m = rules.A(start)) && y(info.cursor) && m + 'y' || rules.C(start);
        }),
        C: rec(function(start) {
          return rules.A(start) || b(start);
        })
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse5 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, rec, rules, x, y, z, _ref1;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x, y = _ref1.y, z = _ref1.z;
      rec = recursive(info);
      return rules = {
        Root: function(start) {
          var m;

          return (m = rules.A(start)) && z(info.cursor) && m + 'z';
        },
        A: rec(function(start) {
          var m;

          return (m = rules.B(start)) && x(info.cursor) && m + 'x' || m || a(start);
        }),
        B: rec(function(start) {
          var m;

          return (m = rules.A(start)) && y(info.cursor) && m + 'y' || rules.C(start);
        }),
        C: rec(function(start) {
          return rules.A(start) || b(start);
        })
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.Root(0);
  };

  xexports = {};

  exports.Test = {
    "test A: Ax|a": function(test) {
      var parse;

      parse = parse1;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      return test.done();
    },
    "test A: Bx|a; B:A|b": function(test) {
      var parse;

      parse = parse2;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('b'), 'b');
      test.equal(parse('bx'), 'bx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('bxg'), 'bx');
      test.equal(parse('bxxg'), 'bxx');
      test.equal(parse('bxxxg'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    },
    "test A: Bx|a; B:C; C:A|b": function(test) {
      var parse;

      parse = parse3;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('b'), 'b');
      test.equal(parse('bx'), 'bx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('bxg'), 'bx');
      test.equal(parse('bxxg'), 'bxx');
      test.equal(parse('bxxxg'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    },
    "test A: Bx|a; B:C|Ay; C:A|b": function(test) {
      var parse;

      parse = parse4;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('ay'), 'ay');
      test.equal(parse('ayx'), 'ayx');
      test.equal(parse('ayxyx'), 'ayxyx');
      test.equal(parse('bxx'), 'bxx');
      test.equal(parse('ayxxx'), 'ayxxx');
      test.equal(parse('ayxmxx'), 'ayx');
      test.equal(parse('b'), 'b');
      test.equal(parse('bx'), 'bx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('bxg'), 'bx');
      test.equal(parse('bxxg'), 'bxx');
      test.equal(parse('bxxxg'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    },
    "test Start: Az; A: Bx|a; B:C|Ay; C:A|b": function(test) {
      var parse;

      parse = parse5;
      test.equal(parse('az'), 'az');
      test.equal(parse('axz'), 'axz');
      test.equal(parse('axxz'), 'axxz');
      test.equal(parse('axxxz'), 'axxxz');
      test.equal(parse('ayz'), 'ayz');
      test.equal(parse('ayxz'), 'ayxz');
      test.equal(parse('ayxyxz'), 'ayxyxz');
      test.equal(parse('bxxz'), 'bxxz');
      test.equal(parse('ayxxxz'), 'ayxxxz');
      test.equal(parse('ayxmxxz'), void 0);
      test.equal(parse('bz'), 'bz');
      test.equal(parse('bxz'), 'bxz');
      test.equal(parse('bxxxz'), 'bxxxz');
      test.equal(parse('bxgz'), void 0);
      test.equal(parse('bxxgz'), void 0);
      test.equal(parse('bxxxgz'), void 0);
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=testpeasy.map
*/
