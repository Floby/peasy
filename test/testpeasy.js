// Generated by CoffeeScript 1.6.2
(function() {
  var combinators, letters, makeInfo, parse1, parse2, parse3, parse4, parse5, xexports, _ref;

  _ref = require("../lib/peasy.js"), makeInfo = _ref.makeInfo, letters = _ref.letters, combinators = _ref.combinators;

  parse1 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, orp, rec, rules, x, _ref1, _ref2;

      _ref1 = letters(info), a = _ref1.a, x = _ref1.x;
      _ref2 = combinators(info), rec = _ref2.rec, orp = _ref2.orp;
      return rules = {
        A: rec(orp((function() {
          var m;

          return (m = rules.A()) && x() && m + 'x' || m;
        }), a))
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse2 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, orp, rec, rules, x, _ref1, _ref2;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x;
      _ref2 = combinators(info), rec = _ref2.rec, orp = _ref2.orp;
      rules = {};
      rules.A = rec(orp((function() {
        var m;

        return (m = rules.B()) && x() && m + 'x' || m;
      }), a));
      rules.B = rec(orp(rules.A, b));
      return rules;
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse3 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, orp, rec, rules, x, _ref1, _ref2;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x;
      _ref2 = combinators(info), rec = _ref2.rec, orp = _ref2.orp;
      rules = {};
      rules.A = rec(orp((function() {
        var m;

        return (m = rules.B()) && x() && m + 'x' || m;
      }), a));
      rules.B = rec(function() {
        return rules.C();
      });
      rules.C = rec(orp(rules.A, b));
      return rules;
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse4 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, orp, rec, rules, x, y, _ref1, _ref2;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x, y = _ref1.y;
      _ref2 = combinators(info), rec = _ref2.rec, orp = _ref2.orp;
      return rules = {
        A: rec(function() {
          return orp((function() {
            var m;

            return (m = rules.B()) && x() && m + 'x' || m;
          }), a)();
        }),
        B: rec(function() {
          return orp((function() {
            var m;

            return (m = rules.A()) && y() && m + 'y';
          }), rules.C)();
        }),
        C: rec(function() {
          return orp(rules.A, b)();
        })
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.A(0);
  };

  parse5 = function(text) {
    var grammar, makeGrammar;

    makeGrammar = function(info) {
      var a, b, orp, rec, rules, x, y, z, _ref1, _ref2;

      _ref1 = letters(info), a = _ref1.a, b = _ref1.b, x = _ref1.x, y = _ref1.y, z = _ref1.z;
      _ref2 = combinators(info), rec = _ref2.rec, orp = _ref2.orp;
      return rules = {
        Root: function() {
          var m;

          return (m = rules.A()) && z() && m + 'z';
        },
        A: rec(orp((function() {
          var m;

          return (m = rules.B()) && x() && m + 'x' || m;
        }), a)),
        B: rec(orp((function() {
          var m;

          return (m = rules.A()) && y() && m + 'y';
        }), function() {
          return rules.C();
        })),
        C: rec(orp((function() {
          return rules.A();
        }), b))
      };
    };
    grammar = makeGrammar(makeInfo(text));
    return grammar.Root(0);
  };

  xexports = {};

  exports.Test = {
    "test A: Ax|a": function(test) {
      var parse;

      parse = parse1;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      return test.done();
    },
    "test A: Bx|a; B:A|b": function(test) {
      var parse;

      parse = parse2;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('b'), 'b');
      test.equal(parse('bx'), 'bx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('bxg'), 'bx');
      test.equal(parse('bxxg'), 'bxx');
      test.equal(parse('bxxxg'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    },
    "test A: Bx|a; B:C; C:A|b": function(test) {
      var parse;

      parse = parse3;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('b'), 'b');
      test.equal(parse('bx'), 'bx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('bxg'), 'bx');
      test.equal(parse('bxxg'), 'bxx');
      test.equal(parse('bxxxg'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    },
    "test A: Bx|a; B:C|Ay; C:A|b": function(test) {
      var parse;

      parse = parse4;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('ay'), 'ay');
      test.equal(parse('ayx'), 'ayx');
      test.equal(parse('ayxyx'), 'ayxyx');
      test.equal(parse('bxx'), 'bxx');
      test.equal(parse('ayxxx'), 'ayxxx');
      test.equal(parse('ayxmxx'), 'ayx');
      test.equal(parse('b'), 'b');
      test.equal(parse('bx'), 'bx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('bxg'), 'bx');
      test.equal(parse('bxxg'), 'bxx');
      test.equal(parse('bxxxg'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    },
    "test Start: Az; A: Bx|a; B:C|Ay; C:A|b": function(test) {
      var parse;

      parse = parse5;
      test.equal(parse('az'), 'az');
      test.equal(parse('axz'), 'axz');
      test.equal(parse('axxz'), 'axxz');
      test.equal(parse('axxxz'), 'axxxz');
      test.equal(parse('ayz'), 'ayz');
      test.equal(parse('ayxz'), 'ayxz');
      test.equal(parse('ayxyxz'), 'ayxyxz');
      test.equal(parse('bxxz'), 'bxxz');
      test.equal(parse('ayxxxz'), 'ayxxxz');
      test.equal(parse('ayxmxxz'), void 0);
      test.equal(parse('bz'), 'bz');
      test.equal(parse('bxz'), 'bxz');
      test.equal(parse('bxxxz'), 'bxxxz');
      test.equal(parse('bxgz'), void 0);
      test.equal(parse('bxxgz'), void 0);
      test.equal(parse('bxxxgz'), void 0);
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=testpeasy.map
*/
